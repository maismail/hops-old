<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    
    <section>
        <title>Big Data Stack</title>
        <para>Hops, as a cloud patform for distrbuted processing and big data, is made up of latest Hadoop ecosystem. As you 
            can see in <xref linkend="arch-stack"/> there are three major layers in our stack, HDFS, YARN and Workflow. 
            Cross-layer aspects like Security and PaaS services are also included.</para>

        <figure id="arch-stack">
            <title>Big Data stack</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="media/arch-stack.jpg" width="6in" depth="5.5in" contentwidth="4in" contentdepth="3in"></imagedata>
                </imageobject>
            </mediaobject>
        </figure>    
        <para>At the bottom layer of big data stack, there is a new version of Hadoop Distributed File System, HOPSFS, with distributed NameNode. NameNodes' metadata has 
            relational representation which is stored in shared nothing, in-memory and replicated database, MySQL-Cluster. State-less NameNodes makes HOPS-FS highly available
            highly performant with the capacity of petabytes storage.</para>
        <para>YARN, new version of Hadoop, which is meant to support different processing models other that Map-Reduce by separating its Resource Manager from Scheduler and 
            Application Master. Application Master gives us flexibility to accommodate heterogeneous processes by implementing a wrapper for each kind of application so it could 
            manage any kind of processing resources that is defined for it. It enables HOPS platform to not be able to support end to end big workflow of big data, containing 
            map-reduce jobs or any other kind of jobs. </para>
        <para>On top of YARN, HOPS workflow engine parses workflows into an execution model of arbitrary tasks. For each task, it asks YARN for a containter, then for each
            container allocated task based on the scheduling policy it stages in data into HOPSFS, launches the task and stages out the result back to HOPSFS.</para>
    </section>

  
    <section>
        <title>Deployment model</title>
        <para>At the moment HOPS supports Amazon Cloud, Open Stack and Bare Metal. Based on the chosen cloud provider, as it can be seen in <xref linkend="arch-deploy"/> our deployment 
        model consist of Hops-Dashboard plus other machines either virtual in cloud or bare metal. Dashboard is the point of administration with web access through which customer 
        could define configuration of the cluster, machines are allocated, their software stack is installed and state of the cluster is monitored. Cloud machines could be associated
        into security node-groups, machines inside each node-group basically have the same security credentials and could communicate with each other; however, communication 
        between machnies from different security group is not possible. All the machins inside the cluster have the same infrastructure and basic stack of softwares, althoug based 
        on the services each machine shoul provide, arbitrary platform softwares are installed.</para>
        <figure id="arch-deploy">
            <title>Deployment Model</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="media/arch-deploy.png" scale="50"></imagedata>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

  
    <section>
        <title>Helper Stack</title>
        <para>Helpers are the intial set up on every machine that provide basics for cloud installation and configiration. On top of them, HOPML is an expressive, extendible 
            markup language that enables definition of the could platform. Its parser transforms the given cluster definition into consecutive stages such as defining security 
            groups, virtual machine allocation, bittorent, installation, validation and retry. All communications with cloud provider happens through JCloud service, each single
            configuration in HOPML may result in multiple JCloud instructions. After machines are allocated in cloud, with the metadata information that JCloud returns, dashboard
            tries to open a ssh connection into every single machine and install Chef agent for installations. Before installation starts, software libraries is replicated in all
            machines from dashboard, though the process could overflow the bandwidth to dashboard if all machines try to download from dashboard. To handle this situation HOPS run
            a bittorent in which dashboard machine is the seeder, then all machnies could contribute to download process which is both faster and anti-bottleneck. After download 
            Chef agent starts installation based on the required packages in each machine and with the order of dependencies between packages. 
        </para>
        <figure id="arch-helper">
            <title>Helper stack</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="media/arch-layers.png" scale="50"></imagedata>
                </imageobject>
                <caption>
                    <para>Helper Stack</para>
                </caption>
            </mediaobject>
        </figure>
    </section>
</section>
