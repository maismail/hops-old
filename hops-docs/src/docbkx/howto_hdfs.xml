<?xml version="1.0" encoding="UTF-8"?>
<chapter  version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns5="http://www.w3.org/2000/svg"
  xmlns:ns4="http://www.w3.org/1998/Math/MathML"
  xmlns:ns3="http://www.w3.org/1999/xhtml"
  xmlns:db="http://docbook.org/ns/docbook"
  xml:id="ch06">
  
  
  <title>Configuring HDFS</title>
  <para>HOP introduces few new configuration parameters to HDFS. These parameters can be specified in hdfs-site.xml file. 
    Detailed list of new configuration parameters is given below 
  </para>
  
  
  <sect1>
    <title>Configuration Parameters</title>
    <itemizedlist>
      
      <listitem>
        <para>
          <emphasis>dfs.storage.type:</emphasis> 
          In HOP all the NameNodes in the system are stateless. 
          All the file system metadata is stored in a relational database. 
          We have chosen MySQL NDB Cluster for its high performance and availability for the storage of the metadata. 
          However the metadata can be stored in any relational database. Default value is this parameter is ‘clusterj’. 
          By default HOPS uses ClusterJ libraries to connect to MySQL NDB Cluster. Later we will provide support of other DBMSs.
        </para>
      </listitem>
      
      <listitem>
        <para>
          <emphasis>dfs.dbconnector.string:</emphasis> 
          Host name of management server of MySQL NDB Cluster. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.dbconnector.database</emphasis> 
          Name of the database that contains the metadata tables. Please consult the appendix for the detailed list of the tables and their structures. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.dbconnector.num-session-factories</emphasis> 
          This is the number of connections that are created in the ClusterJ connection pool.
          If it is set to 1 then all the sessions share the same connection; 
          all requests for a SessionFactory with the same connect string and database will share a single SessionFactory. 
          A setting of 0 disables pooling; each request for a SessionFactory will receive its own unique SessionFactory.
          We set the default value of this parameter to 3. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.storage.mysql.user:</emphasis> 
          A valid user name to access MySQL Server. 
          For higher performance we use MySQL Server to perform a aggregate queries on the file system metadata.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.storage.mysql.user.password:</emphasis> 
          MySQL user password
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.storage.mysql.port:</emphasis> 
          MySQL Server port. If not specified then default value of 3306 is chosen.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.quota.enabled:</emphasis> 
          Using this parameter quota can be en/disabled. By default quota is enabled. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.namenodes.rpc.address:</emphasis>
          HOP support multiple active NameNodes. 
          A client can send a RPC request to any of the active NameNodes. 
          This parameter specifies a list of active NameNodes in the system. 
          The list has following format [ip:port, ip:port, … ]. 
          It is not necessary that this list contain all the active NameNodes in the system. 
          Only one valid reference to an active NameNode is sufficient. 
          At the time of startup the client will obtain the updated list of all the NameNodes in the system from the given NameNode. 
          If this list is empty then the client will connect to 'fs.default.name'. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.namenode.selector-policy:</emphasis> 
          For a RPC call client will choose an active NameNode based on the following policies.
          <orderedlist>
            <listitem><para>ROUND_ROBIN</para></listitem>
            <listitem><para>RANDOM</para></listitem>
          </orderedlist>
          By default NameNode selection policy is set of ROUND_ROBIN
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.leader.check.interval:</emphasis>
          One of the active NameNodes is chosen as a leader to perform housekeeping operations. 
          All NameNodes periodically send a HeartBeat and check for changes in the membership of the NameNodes. 
          By default the HeartBeat is sent after every second. 
          Increasing the time interval would lead to slow failure detection.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.leader.missed.hb:</emphasis> 
          This property specifies when a NameNode is pronounced dead. 
          By default a NameNode is pronounced dead if it misses a HeatBeat. 
          Higher values of this property would lead to slow failure detection.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.block.pool.id:</emphasis> 
          Due to shared state among the NameNodes, HOP only support one block pool. 
          Set this property to set custom value for block pool. Default block pood is is HOP_BLOCK_POOL_123.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.name.space.id:</emphasis> 
          Due to shared state among NameNodes, HOPS only support one name space. 
          Set this property to set custom value for name space. Default name space id is 911 :)
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dfs.clinet.max.retires.on.failure:</emphasis> 
          The client will retry the RPC call if the RPC fails due to the failure of the NameNode. 
          This property specifies how many times the client would retry the RPC before throwing an exception. 
          This property is directly related to number of expected simultaneous failures of NameNodes. 
          Set this value to ‘1’ in case of low failure rates such as one dead NameNode at any given time. 
          It is recommended that this property must be set to value >= 1.
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dsf.client.max.random.wait.on.retry:</emphasis> 
          A RPC could fail because of multiple factors such as NameNode failure, network congestion etc. 
          Changes in the membership of NameNodes can lead to contention on the remaining NameNodes.
          In order to avoid contention on the remaining NameNodes in the system the client would randomly wait between [0,MAX_VALUE] ms before retrying the RPC. 
          This property specifies MAX_VALUE; by default it is set to 1000 ms. 
        </para>
      </listitem>
      
      
      <listitem>
        <para>
          <emphasis>dsf.client.refresh.namenode.list:</emphasis> 
          All clients periodically refresh the list of active NameNodes in the system. 
          By default after every minute the client checks for changes in the membership of the NameNodes. 
          Higher values can be chosen for scenarios where the membership does not change frequently
        </para>
      </listitem>
    </itemizedlist>    
  </sect1>
</chapter>
